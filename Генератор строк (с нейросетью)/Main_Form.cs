using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml.Serialization;
using System.IO;
using System.Collections;
using System.Xml;
using System.Diagnostics;

namespace Генератор_строк__с_нейросетью_
{


    /** 
        \authors Коковихин Андрей и Мисюркеев Никита
        \version 1.0.0
        \date 13.10.2020
        \bug Без пайтона не работает!
        \warning Без пайтона не работает!!!
        \copyright Здесь могла быть ваша лицензия
        \example Здесь мог быть ваш исходник...
        \todo Он должен суметь написать поэму!
    */

    /*!
        \brief Главная форма проекта
     */
    public partial class Form1 : Form
    {
        StringGenerator generator = null;   /// Генератор строк
        string[] NetworksNames;             /// Список существующих сетей
        string[] Networks_Dict;             /// Словарь нейросетей
        static bool SQL_Debug = false;       /// Переменная отладки SQL запросов. Если "true", выводит результаты запросов в консоль.

        /**
         \brief Конструктор главной формы
         */
        public Form1()
        {
            InitializeComponent();
            NetworksNames = Neural_Network_Interface.Get_Nets_List().Split('*');
            Networks_Dict = Neural_Network_Interface.Get_Words_Dict().Split('*');
            Networks_Dict[0] = "*";
            Networks_Dict[1] = "*";
        }

        /*!
            \brief Класс реализующий связь с нейросетью.
            \detail Статический класс. Осуществляет связь проекта со скриптом, написанном на языке Python.
         */
        static class Neural_Network_Interface
        {
            /**
                \brief Функция запуска внешнего файла.
                \details Вызывает через консоль запуск файла "Net.py" с параметрами args.
                \warning Аргументы должны быть заранее оформленны кавычками. Например: COMMAND "arg1" "arg2"...
                \return Возвращает всю, выведенную в консоль коммандой print(...), информацию.
            */
            static string Run_cmd(string args)
            {
                ProcessStartInfo start = new ProcessStartInfo
                {
                    FileName = @"python"
                };
                string Py_File_Name = "Net.py";
                start.Arguments = string.Format("\"{0}\" {1}", Py_File_Name, args);
                start.UseShellExecute = false;// Do not use OS shell
                start.CreateNoWindow = true; // We don't need new window
                start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
                start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
                using (Process process = Process.Start(start))
                {
                    using (StreamReader reader = process.StandardOutput)
                    {
                        string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                        string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                        if (SQL_Debug)
                            Console.WriteLine(result);
                        return result;
                    }
                }
            }

            /**
                \brief Функция генерации строки.
                \details Передаёт скрипту комманду "GENERATE_STRING" с аргументами: name и lenght.
                \param[string] name - имя генерирующей нейросети.
                \param[int] length - длинна генерируемой строки.
                \return Строка сгенерированная нейросетью.
             */
            public static string Generate_str(string name, int length)
            {
                return Run_cmd(string.Format("GENERATE_STRING {0} {1}", name, length));
            }

            /**
                \brief Функция обучения нейросети.
                \details Передаёт скрипту комманду "TRAIN_NETWORK" с аргументами: name, train_str и (если указана) output_str.
                \param[string] name - имя тренеруемой нейросети.
                \param[string] train_str - Обучающая строка. Набор слов, порядок которых отправляется на заучивание в нейросеть.
                \warning Аргумент train_str должен быть зарание отфарматирован!
                \return Результат обучения.
             */
            public static string Train_Network(string name, string train_str)
            {
                return Run_cmd(string.Format("TRAIN_NETWORK {0} {1}", name, train_str));
            }

            /**
                \brief Функция создающая нейросеть.
                \details Передаёт скрипту комманду "CREATE_NET" с аргументом: name.
                \param[string] name - имя создаваемой нейросети.
                \return Результат.
             */
            public static string Create_Net(string name)
            {
                return Run_cmd(string.Format("CREATE_NET {0}", name));
            }

            /**
                \brief Функция удаляющая нейросеть.
                \details Передаёт скрипту комманду "CREATE_NET" с аргументом: name.
                \param[string] name - имя удаляемой нейросети.
                \return Результат.
             */
            public static string Delete_Net(string name)
            {
                return Run_cmd(string.Format("DELETE_NET {0}", name));
            }

            /**
                \brief Функция возвращающая список имён хранящихся в базе нейросетей.
                \details Передаёт скрипту комманду "GET_NETS_LIST".
                \return Строка содержащая имена нейросетей, разделённые знаком "*".
             */
            public static string Get_Nets_List()
            {
                return Run_cmd("GET_NETS_LIST");
            }

            /**
                \brief Функция генерации строки.
                \details Передаёт скрипту комманду "GET_WORDS_DICT".
                \return Строка содержащая список известных нейросетям слов.
             */
            public static string Get_Words_Dict()
            {
                return Run_cmd("GET_WORDS_DICT");
            }
        }

        /*!
            \brief Главный класс - Генератор строк.
            \details Класс реализующий генерацию строк.
        */
        class StringGenerator
        {
            public string Network_Name { get; } /// Имя соеденённой нейросети.
            /**
                \brief Конструктор класса.
                \details Создаёт генератор строк, привязанный к определённой нейросети.
                \param[string] net_Name - Имя привязываемой нейросети.
            */
            public StringGenerator(string net_Name)
            {
                Network_Name = net_Name;
            }

            /**
                \brief Основной метод класса.
                \param[int] length - число слов в генерируемой строке.
                \return Возвращает, сгенерированную нейросетью, строку.
            */
            public string GenerateString(int length)
            {
                string str = Neural_Network_Interface.Generate_str(Network_Name, length);

                return str;
            }
        }

        /**
            \brief Функция создания новой нейросети.
            \detail Вызывает диалоговое окно "CreateNetwork_Form", в случае если диалог завершился с кодом "ОК", вызывает метод "Neural_Network_Interface.Create_Net" и обновляет список "NetworksNames".
         */
        private void CreateNet_ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Events_StatusLabel.Text = "Создание новой нейронной сети...";
            timer1.Stop();

            CreateNetwork_Form dialog_form = new CreateNetwork_Form(NetworksNames);

            if (dialog_form.ShowDialog() == DialogResult.OK)
            {
                Neural_Network_Interface.Create_Net(dialog_form.NetworkName);
                NetworksNames = Neural_Network_Interface.Get_Nets_List().Split('*');
                Events_StatusLabel.Text = string.Format("Создана новая нейронная сеть - {0}", dialog_form.NetworkName);
            }
            else
                Events_StatusLabel.Text = "Процесс создания прерван!";
            timer1.Start();
        }

        /**
            \brief Функция выбора нейросети.
            \detail Вызывает диалоговое окно "SelectNetwork_Form", в случае если диалог завершился с кодом "ОК", инициализирует новый экземпляр "StringGenerator" - generator.
         */
        private void Select_ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Events_StatusLabel.Text = "Выбор нейронной сети...";
            timer1.Stop();

            SelectNetwork_Form dialog_form = new SelectNetwork_Form(NetworksNames);
            if (dialog_form.ShowDialog() == DialogResult.OK)
            {
                generator = new StringGenerator(dialog_form.NetName);
                NetName_StatusLabel.Text = dialog_form.NetName;
                Events_StatusLabel.Text = string.Format("Выбрана нейронная сеть - {0}", dialog_form.NetName);
            }
            else
                Events_StatusLabel.Text = "Не удалось выбрать нейросеть!";
            timer1.Start();
        }

        /**
            \brief Функция генерации текста.
            \detail Вызывает диалоговое окно "Generating_Form", его результат отправляет в метод "generator.GenerateString" и записывает сгенерированную строку в переменную "str", обрезая символы "*".
         */
        private void GenerateString_ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (generator != null)
            {
                Events_StatusLabel.Text = "Генерация текста...";
                timer1.Stop();

                Generating_Form dialog_form = new Generating_Form();

                if (dialog_form.ShowDialog() == DialogResult.OK)
                {
                    string str = generator.GenerateString(dialog_form.StingLength);
                    str = str.Replace("* ", "");
                    richTextBox1.Text += str;
                    Events_StatusLabel.Text = "Генерация текста завершена.";
                }
                else
                    Events_StatusLabel.Text = "Операция прервана!";
            }
            else
                Events_StatusLabel.Text = "Нейросеть не выбрана!!!";

            timer1.Start();
        }

        /**
            \brief Функция обучения нейросетей.
            \detail Вызывает диалоговое окно "Training_Form", при завершении с кодом "ОК", вызывает метод "Neural_Network_Interface.Train_Network" для каждого имени из "dialog_form.TrainingNetworks", передавая вторым аргументом "dialog_form.TrainingArguments_String".
         */
        private void Learn_ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Events_StatusLabel.Text = "Обучение нейросетей...";
            timer1.Stop();

            Training_Form dialog_form = new Training_Form(NetworksNames, Networks_Dict);
            if (dialog_form.ShowDialog() == DialogResult.OK)
            {
                string names = "";
                foreach (string name in dialog_form.TrainingNetworks)
                {
                    Neural_Network_Interface.Train_Network(name, dialog_form.TrainingArguments_String);
                    Events_StatusLabel.Text = string.Format("Обучение нейросети {0} завершено.", name);
                    names += name + ' ';
                }
                Events_StatusLabel.Text = string.Format("Процесс обучения нейросетей: {0}завершён.", names);
            }
            else
                Events_StatusLabel.Text = "Обучение отменено!";


            timer1.Start();
        }

        /**
            \brief Функция удаления нейросети.
            \detail Вызывает диалоговое окно "SelectNetwork_Form", в случае если диалог завершился с кодом "ОК", вызывает метод "Neural_Network_Interface.Delete_Net" и обновляет список "NetworksNames".
         */
        private void Remove_ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Events_StatusLabel.Text = "Удаление нейронной сети...";
            timer1.Stop();

            SelectNetwork_Form dialog_form = new SelectNetwork_Form(NetworksNames);

            if (dialog_form.ShowDialog() == DialogResult.OK)
            {
                Neural_Network_Interface.Delete_Net(dialog_form.NetName);
                NetworksNames = Neural_Network_Interface.Get_Nets_List().Split('*');
                Events_StatusLabel.Text = string.Format("Удалена нейронная сеть - {0}", dialog_form.NetName);
                if (generator != null)
                    if (generator.Network_Name == dialog_form.NetName)
                    {
                        generator = null;
                        NetName_StatusLabel.Text = "Нейросеть не выбрана!";
                    }
            }
            else
                Events_StatusLabel.Text = "Процесс удаления прерван!";
            timer1.Start();
        }

        private void Timer1_Tick(object sender, EventArgs e)
        {
            Events_StatusLabel.Text = "Ожидание...";
        }
    }
}
